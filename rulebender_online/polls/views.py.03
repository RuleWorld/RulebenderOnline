from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect
from django.http import *
from django.urls import reverse
from django.views import generic
from django.utils import timezone
from django.template import RequestContext
import json
from django.http import HttpResponse
import socket
from subprocess import  call
import os
import urllib2
from subprocess import Popen, PIPE


from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]


def ajaxa(request):
    if request.POST.has_key('client_response'):
        x_bngl = request.POST['client_response']

        file = open("/home/roc60/d_contactmap/egfr_net.bngl", "w")
        file.write(x_bngl)
        file.close()

        os.system("/home/roc60/d_contactmap/s_bngl2json")


        dir(request.session)
        file = open("/home/roc60/d_contactmap/session.txt", "w")
        x_session = request.session._get_or_create_session_key()
        p = Popen('date "+%m"', shell=True, stdout=PIPE, stderr=PIPE)
        x_month   = p.stdout.read()
        client_ip = request.META['REMOTE_ADDR']
        client_ip = request.META.get('REMOTE_ADDR')
        """
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            client_ip = x_forwarded_for.split(',')[-1].strip()
        else:
        """
        file.write(x_month)
        file.close()

        """
        user_raw = urllib2.urlopen('http://freegeoip.net/json/216.251.43.17')
        user_json = user_raw.read()
        file = open("/home/roc60/d_contactmap/user_data.txt", "w")
        file.write(user_json)
        file.close()

        For system calls
        call(["/home/roc60/d_contactmap/s_call_bngl2json"])
        """

        file = open("/home/roc60/d_contactmap/layout_elements.txt", "r")
        y_bngl = file.read()
        file.close()


        return HttpResponse(y_bngl, content_type='text/plain')
    else:
        template_name = 'polls/index.html'




class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'



class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'

    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())



def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))


