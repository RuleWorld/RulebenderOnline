from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect
from django.http import *
from django.urls import reverse
from django.views import generic
from django.utils import timezone
from django.template import RequestContext
import json
from django.http import HttpResponse
import socket
from subprocess import  call
import os
import urllib2
from subprocess import Popen, PIPE


from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]

""" ------------- SECOND UPLOAD OF DATA --------------------------- """
""" This anticipates a session key in the first line of the file """
""" This anticipates a model name in the second line of the file """
""" This anticipates zero parameters """
def zero_key(request,python_map_type):
    x_bngl = request.POST['client_response']

    key_end = x_bngl.find("\n")
    x_session = x_bngl[0:key_end]

    name_end = x_bngl.find("\n",key_end+1)
    x_name   = x_bngl[key_end+1:name_end]
    x_bngl   = x_bngl[name_end+1:]

    p = Popen('date "+%m"', shell=True, stdout=PIPE, stderr=PIPE)
    y_month   = p.stdout.read().strip()
    p = Popen('/home/roc60/d_rulebender_data/d_utilities/s_get_month  ' +
              y_month + '  ' + x_session, shell=True, stdout=PIPE, 
              stderr=PIPE)
    x_month   = p.stdout.read().strip()
    if x_month == 'not_found':
        y_bngl = 'not_found'
    else:
        dir_head = "/home/roc60/d_rulebender_data/" \
                   + x_month + "/" + x_session
        con_head = dir_head + "/d_contactmap"
        data_head = con_head + "/input_file.bngl"
        file = open(data_head, "w")
        file.write(x_bngl)
        file.close()
        

        util_dir = "/home/roc60/d_rulebender_data/d_utilities/s_cmap"
        os.system(util_dir + " " + x_month + " " + x_session + 
                  " " + python_map_type)

        result_file =  con_head + "/layout_elements.txt"
        file = open(result_file, "r")
        y_bngl = file.read()
        file.close()


           
    z_bngl = y_bngl + "    \n    session_key    \n   " + x_session
    """ For debugging purposes """
    file = open("/home/roc60/d_contactmap/session.txt", "w")
    file.write("Got latest.\n")
    file.close()

    return HttpResponse(z_bngl, content_type='text/plain')


def cmap_key(request):
    if request.POST.has_key('client_response'):
        return zero_key(request,"contactmap") 
    else:
        template_name = 'polls/index.html'

def pmap_key(request):
    if request.POST.has_key('client_response'):
        return zero_key(request,"ruleviz_pattern") 
    else:
        template_name = 'polls/index.html'

def omap_key(request):
    if request.POST.has_key('client_response'):
        return zero_key(request,"ruleviz_operation") 
    else:
        template_name = 'polls/index.html'


""" ------------- SECOND UPLOAD OF DATA --------------------------- """
""" This anticipates a session key in the first line of the file """
""" This anticipates a model name in the second line of the file """
def pone_key(request):
    if request.POST.has_key('client_response'):
        x_bngl = request.POST['client_response']

        key_end = x_bngl.find("\n")
        x_session = x_bngl[0:key_end]

        name_end = x_bngl.find("\n",key_end+1)
        x_name   = x_bngl[key_end+1:name_end]

        aux_end   = x_bngl.find("\n",name_end+1)
        aux_value = x_bngl[name_end+1:aux_end]

        x_bngl   = x_bngl[aux_end+1:]
        """
        file = open("/home/roc60/d_contactmap/session.txt", "w")
        file.write(x_session + "\n" + x_name)
        file.close()
        """



        """
        WATCH OUT  !!!    WATCH OUT !!!   WATCH OUT !!!
        There's a bug here !! The directory may not reside in this month's
        bucket.  You may need to look in last month's bucket. And if 
        the expiration data is more than 30 days, then you may need to go
        even farther back in time.
        """

        """
        dir(request.session)
        x_session = request.session._get_or_create_session_key()
        """
        p = Popen('date "+%m"', shell=True, stdout=PIPE, stderr=PIPE)
        x_month   = p.stdout.read().strip()
        client_ip = request.META['REMOTE_ADDR']
        client_ip = request.META.get('REMOTE_ADDR')


        """
        user_raw = urllib2.urlopen('http://freegeoip.net/json/216.251.43.17')
        user_json = user_raw.read()
        file = open(dir_head + "/user_data.txt", "w")
        file.close()
        For system calls
        call(["/home/roc60/d_contactmap/s_call_bngl2json"])
        """

        """ Create director for this data set. """
        dir_head = "/home/roc60/d_rulebender_data/" + x_month + "/" + x_session
        con_head = dir_head + "/d_contactmap"
        data_head = con_head + "/input_file.bngl"
        file = open(data_head, "w")
        file.write(x_bngl)
        file.close()

        util_dir = "/home/roc60/d_rulebender_data/d_utilities/s_cmap"
        os.system(util_dir + " " + x_month + " " + x_session + " ruleviz_pattern_one " + aux_value)

        result_file =  con_head + "/layout_elements.txt"
        file = open(result_file, "r")
        y_bngl = file.read()
        file.close()

        z_bngl = y_bngl + "    \n    session_key    \n   " + x_session


        return HttpResponse(z_bngl, content_type='text/plain')
    else:
        template_name = 'polls/index.html'





""" ------------- FIRST UPLOAD OF DATA --------------------------- """
""" This does not anticipate a session key at the head of the file """
""" It does expect a model name at the head of the file """
""" Instead, it creates a session key, and sends it back """
def ajaxa(request):
    if request.POST.has_key('client_response'):
        x_bngl = request.POST['client_response']

        dir(request.session)
        x_session = request.session._get_or_create_session_key()
        p = Popen('date "+%m"', shell=True, stdout=PIPE, stderr=PIPE)
        x_month   = p.stdout.read().strip()
        client_ip = request.META['REMOTE_ADDR']
        client_ip = request.META.get('REMOTE_ADDR')
        """
        file = open("/home/roc60/d_contactmap/session.txt", "w")
        file.write(x_session)
        file.close()
        """


        """
        user_raw = urllib2.urlopen('http://freegeoip.net/json/216.251.43.17')
        user_json = user_raw.read()
        file = open(dir_head + "/user_data.txt", "w")
        file.close()
        For system calls
        call(["/home/roc60/d_contactmap/s_call_bngl2json"])
        """

        """ Create director for this data set. """
        dir_head = "/home/roc60/d_rulebender_data/" + x_month + "/" + x_session
        sysy_head = "mkdir " + dir_head
        os.system(sysy_head)

        con_head = dir_head + "/d_contactmap"
        sysy_head = "mkdir " + con_head 
        os.system(sysy_head)
        
        data_head = con_head + "/input_file.bngl"
        file = open(data_head, "w")
        file.write(x_bngl)
        file.close()

        util_dir = "/home/roc60/d_rulebender_data/d_utilities/s_cmap"
        os.system(util_dir + " " + x_month + " " + x_session + " contactmap")

        result_file =  con_head + "/layout_elements.txt"
        file = open(result_file, "r")
        y_bngl = file.read()
        file.close()

        z_bngl = y_bngl + "    \n    session_key    \n   " + x_session


        return HttpResponse(z_bngl, content_type='text/plain')
    else:
        template_name = 'polls/index.html'




class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'



class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'

    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())



def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))


