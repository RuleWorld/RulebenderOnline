<script>

var layout_string = ' '; 
var nodes_string  = ' ';
var edges_string  = ' ';








function GraphCMap(){ // on dom ready


layout_string = '{ layout: { name: "grid" } }' ;



$('#cy').cytoscape({


   style: [
    {
      selector: 'node',
      css: {
        'content': 'data(label)',
        'shape': 'data(faveShape)',
        'width': 'mapData(weight, 40, 80, 90, 80)',
        'text-valign': 'center',
        'text-halign': 'center',
        'text-outline-width': 2,
        'text-outline-color': 'data(faveColor)',
        'background-color': 'data(faveColor)',
        'color':'#000'        
      }
    },
    {
      selector: '$node > node',
      css: {
        'padding-top': '20px',
        'padding-left': '10px',
        'padding-bottom': '10px',
        'padding-right': '10px',
        'text-valign': 'top',
        'text-halign': 'center'
      }
    },
    {
      selector: 'edge',
      css: {
        'target-arrow-shape': 'triangle',
        'line-color': 'data(faveColor)',
        'source-arrow-color': 'data(faveColor)',
        'target-arrow-color': 'data(faveColor)'

      }
    },
    {
      selector: ':selected',
      css: {
        'background-color': 'black',
        'line-color': 'black',
        'target-arrow-color': 'black',
        'source-arrow-color': 'black'
      }
    }
  ],




  
// layout_string,
  


  
  
  ready: function(){
    window.cy = this;
// var layout_string; 
// var nodes_string;
// var edges_string;
    var lugylong = 
    '{"nodes": [ { "data": { "#id": "a * b" }}, { "data": { "id": "b" }} ]}';
//    cy.add(JSON.parse(lugylong));

//    var nnnn = nodes_string.replace(/[\x00-\x1F\x7F-\x9F]/g, "");
//    cy.elements().layout(layout_string); 
    cy.add(JSON.parse(nodes_string));
    cy.add(JSON.parse(edges_string));


//    cy.filter(function(i, element){
//      alert( element.data("id"))
//    });

   
    // giddy up...
    
    cy.elements().unselectify();
    
    cy.on('tap', 'node', function(e){
      var node = e.cyTarget; 
      var neighborhood = node.neighborhood().add(node);
      
      cy.elements().addClass('faded');
      neighborhood.removeClass('faded');
    });
    
    cy.on('tap', function(e){
      if( e.cyTarget === cy ){
        cy.elements().removeClass('faded');
      }
      
    });
      cy.panzoom({
          // options go here
        });
  }


});



} // on dom ready







//  $(document).ready(function() {
//    $("#button").click(
//  );
//    }
//  );



function SendBNGL() {
                    var input_string = $("#forminput").val();


                    var edout = editor.getValue();
                    var rhc_data = {'foo': 'bar', 'hello': 'world'};
                    $.ajax({
                        url : "/polls/ajaxa/", 
                        type : "POST",
                        dataType: "text", 
                        data : {
                            client_response : edout,
                            csrfmiddlewaretoken: '{{ csrf_token }}'
                            },
                        success : function(tjson) {
//                          alert(" " + tjson.server_response.substring(1, 12));
                            //  alert(" SUCCESS: " + tjson); // xhr.status);
                            var rn = tjson.indexOf("RuleBender"); 
                            var bn = tjson.indexOf("BioNetGen"); 
                            var bnrn = bn-rn;
                            layout_string = tjson.substring(0,rn);
                            layout_string = layout_string.trim();
                            alert(" LAYOUT: " + layout_string);
                            nodes_string = tjson.substring(rn+10,bn-1);
                            nodes_string = nodes_string.trim();
                      //      alert(" NODES: " + nodes_string);
                            edges_string = tjson.substring(bn+10,tjson.length);
                            edges_string = edges_string.trim();
                      //      alert(" EDGES: " + edges_string);
                            GraphCMap();
//                            $('#result').append( 'ServerResponse:' + tjson.server_response);
                        },
                        error : function(xhr,errmsg,err) {
                            alert(" ERROR " + xhr.status + ": " + xhr.responseText);
                        }
                    });
                    return false;
            }













var cs = document.getElementById("modecode");
var validator = CodeMirror.fromTextArea(document.getElementById("validate"), {
  value: (cs.textContent || cs.innerText || cs.innerHTML),
  mode: 'my_simple_mode',
  tabMode: 'indent',
  lineNumbers: true,
  lineWrapping: true,
  autoCloseTags: true
});
validator.setSize(null,150);



function numTokens(my_string) {
  var comma_list  = my_string.split(" ");

  var pcount = 0;
  for (kk = 0; kk < comma_list.length; kk++) { 
    var tab_list = comma_list[kk].split("\t");
    for (jj = 0; jj < tab_list.length; jj++) { 
      if ((tab_list[jj].trim()).length > 0) { pcount++; }  
    }
  }

return pcount;
}

function isCode(my_string) {
  var result = "code";
    if (comment_regex.test(my_string))          { result = "comment"; }
    if (!non_blank_line_regex.test(my_string))  { result = "comment"; }
  
    if (numTokens(my_string) == 2) {  
      if (begin_model_regex.test(my_string))           { result = "scthead"; }}
    if (numTokens(my_string) == 2) {  
      if (end_model_regex.test(my_string))             { result = "scthead"; }}

    if (numTokens(my_string) == 2) {  
      if (begin_parameters_regex.test(my_string))      { result = "scthead"; }}
    if (numTokens(my_string) == 2) {  
      if (end_parameters_regex.test(my_string))        { result = "scthead"; }}

    if (numTokens(my_string) == 3) {  
      if (begin_seed_species_regex.test(my_string))    { result = "scthead"; }}
    if (numTokens(my_string) == 3) {  
      if (end_seed_species_regex.test(my_string))      { result = "scthead"; }}

    if (numTokens(my_string) == 3) {  
      if (begin_molecule_types_regex.test(my_string))  { result = "scthead"; }}
    if (numTokens(my_string) == 3) {  
      if (end_molecule_types_regex.test(my_string))    { result = "scthead"; }}

    if (numTokens(my_string) == 2) {  
      if (begin_species_regex.test(my_string))         { result = "scthead"; }}
    if (numTokens(my_string) == 2) {  
      if (end_species_regex.test(my_string))           { result = "scthead"; }}

    if (numTokens(my_string) == 2) {  
      if (begin_observables_regex.test(my_string))     { result = "scthead"; }}
    if (numTokens(my_string) == 2) {  
      if (end_observables_regex.test(my_string))       { result = "scthead"; }}

    if (numTokens(my_string) == 2) {  
      if (begin_functions_regex.test(my_string))       { result = "scthead"; }}
    if (numTokens(my_string) == 2) {  
      if (end_functions_regex.test(my_string))         { result = "scthead"; }}

    if (numTokens(my_string) == 3) {  
      if (begin_reaction_rules_regex.test(my_string))  { result = "scthead"; }}
    if (numTokens(my_string) == 3) {  
      if (end_reaction_rules_regex.test(my_string))    { result = "scthead"; }}

    if (numTokens(my_string) == 2) {  
      if (begin_compartments_regex.test(my_string))    { result = "scthead"; }}
    if (numTokens(my_string) == 2) {  
      if (end_compartments_regex.test(my_string))      { result = "scthead"; }}

  return result;
}



function getSection(sname,lstring) {


     var b_ses     = begin_seed_species_regex.test(lstring);
     var e_ses     =   end_seed_species_regex.test(lstring);
     var b_par     = begin_parameters_regex.test(lstring);
     var e_par     =   end_parameters_regex.test(lstring);
     var b_mot     = begin_molecule_types_regex.test(lstring);
     var e_mot     =   end_molecule_types_regex.test(lstring);
     var b_spc     = begin_species_regex.test(lstring);
     var e_spc     =   end_species_regex.test(lstring);
     var b_obs     = begin_observables_regex.test(lstring);
     var e_obs     =   end_observables_regex.test(lstring);
     var b_fnc     = begin_functions_regex.test(lstring);
     var e_fnc     =   end_functions_regex.test(lstring);
     var b_rer     = begin_reaction_rules_regex.test(lstring);
     var e_rer     =   end_reaction_rules_regex.test(lstring);
     var b_com     = begin_compartments_regex.test(lstring);
     var e_com     =   end_compartments_regex.test(lstring);
     var e_mod     =   end_model_regex.test(lstring);

     if (b_par) {if (numTokens(lstring) == 2) { sname = "parameters"; }}
     if (b_mot) { sname = "molecule_types"; }
     if (b_spc) { sname = "species"; }
     if (b_obs) { sname = "observables"; }
     if (b_fnc) { sname = "functions"; }
     if (b_rer) { sname = "reaction_rules"; }
     if (b_ses) { sname = "seed_species"; }
     if (b_com) { sname = "compartments"; }
//     if (b_mod) { sname = "none"; }

     if (e_par) { sname = "none"; }
     if (e_mot) { sname = "none"; }
     if (e_spc) { sname = "none"; }
     if (e_obs) { sname = "none"; }
     if (e_fnc) { sname = "none"; }
     if (e_rer) { sname = "none"; }
     if (e_ses) { sname = "none"; }
     if (e_com) { sname = "none"; }
     if (e_mod) { sname = "simulation"; }

return sname;
}

var loopcount = 0;

// setInterval(function() {
// setInterval(function updateBlob() {
 function updateBlob() {
   var section_name = "none";
   var stuff_to_print = "";
   var edout = editor.getValue();
   var section_count = 0;

   var lines = edout.split('\n');
   for(var i = 0;i < lines.length;i++){
     var iline = i+1;
     var sline = lines[i].trim();
     var comlb = sline.indexOf("#");

     // Remove any comment
     var comub = "";
     if (comlb > 0) {  
       comub = sline.substring(0,comlb);
     } 
     if (comlb < 0) {  
       comub = sline;
     }


     section_name = getSection(section_name,comub);

//     stuff_to_print = stuff_to_print + " " + comub + " " + section_name + 
//     "  " + isCode(comub) + "  " +  numTokens(comub) + "\n\n";

     if (section_name == "none") {
       if ((isCode(comub) == "code") && (section_count > -1)) {
         section_count = section_count + 1;
         stuff_to_print = stuff_to_print + 
          "Line Number " + iline + "\n" +
          "BNGL code was found that does not belong to a section:\n" +
          "    " + sline + "\n\n";
       }
     }
     if (section_name == "parameters") {
       if (isCode(comub) == "code") {
         if (numTokens(comub) > 2) {
           stuff_to_print = stuff_to_print + 
             "Line Number " + iline + "\n" +
             "The following statement is not a parameter definition:\n" +
             "    " + sline + "\n\n";

         }
       }
     }
   }

   if (non_blank_line_regex.test(stuff_to_print)) {
     validator.setValue(stuff_to_print);
   } else {
     loopcount++;
     validator.setValue("Model formulation is valid.   " + loopcount);
     SendBNGL();
   }
// }, 3000);
//}, 9000);
 }




var sc = document.getElementById("modecode");
var editor = CodeMirror.fromTextArea(document.getElementById("cm"), {
  value: (sc.textContent || sc.innerText || sc.innerHTML),
  mode: 'my_simple_mode',
  tabMode: 'indent',
  lineNumbers: true,
  lineWrapping: true,
  autoCloseTags: true
});

// GraphCMap();
// updateBlob(); 
</script>
